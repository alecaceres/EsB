#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.1
#  in conjunction with Tcl version 8.6
#    Apr 19, 2020 04:35:07 PM -04  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import P3_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    P3_support.set_Tk_var()
    top = Toplevel1 (root)
    P3_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    P3_support.set_Tk_var()
    top = Toplevel1 (w)
    P3_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1299x713+67+27")
        top.minsize(1, 1)
        top.maxsize(1351, 1506)
        top.resizable(1, 1)
        top.title("Proyecto 3 2020 - Rover")
        top.configure(highlightcolor="black")

        self.Comandos = tk.Frame(top)
        self.Comandos.place(relx=0.046, rely=0.028, relheight=0.456
                , relwidth=0.941)
        self.Comandos.configure(relief='groove')
        self.Comandos.configure(borderwidth="2")
        self.Comandos.configure(relief="groove")

        self.Adelante = tk.Button(self.Comandos)
        self.Adelante.place(relx=0.114, rely=0.123, height=26, width=98)
        self.Adelante.configure(activebackground="#f9f9f9")
        self.Adelante.configure(text='''Adelante''')

        self.Izquierda = tk.Button(self.Comandos)
        self.Izquierda.place(relx=0.204, rely=0.2, height=26, width=98)
        self.Izquierda.configure(activebackground="#f9f9f9")
        self.Izquierda.configure(text='''Izquierda''')

        self.Derecha = tk.Button(self.Comandos)
        self.Derecha.place(relx=0.02, rely=0.2, height=26, width=98)
        self.Derecha.configure(activebackground="#f9f9f9")
        self.Derecha.configure(text='''Derecha''')

        self.Atrás = tk.Button(self.Comandos)
        self.Atrás.place(relx=0.114, rely=0.277, height=26, width=98)
        self.Atrás.configure(activebackground="#f9f9f9")
        self.Atrás.configure(text='''Atrás''')

        self.Comandos_Panoramica = ttk.Separator(self.Comandos)
        self.Comandos_Panoramica.place(relx=0.304, rely=0.025, relheight=0.954)
        self.Comandos_Panoramica.configure(orient="vertical")

        self.Velocidad_label = tk.Label(self.Comandos)
        self.Velocidad_label.place(relx=0.016, rely=0.769, height=15, width=99)
        self.Velocidad_label.configure(activebackground="#f9f9f9")
        self.Velocidad_label.configure(text='''Velocidad''')

        self.cm_s = tk.Label(self.Comandos)
        self.cm_s.place(relx=0.098, rely=0.831, height=15, width=40)
        self.cm_s.configure(activebackground="#f9f9f9")
        self.cm_s.configure(text='''cm/s''')

        self.Velocidad = tk.Spinbox(self.Comandos, from_=1.0, to=100.0)
        self.Velocidad.place(relx=0.033, rely=0.831, relheight=0.052
                , relwidth=0.063)
        self.Velocidad.configure(activebackground="#f9f9f9")
        self.Velocidad.configure(background="white")
        self.Velocidad.configure(font="TkDefaultFont")
        self.Velocidad.configure(highlightbackground="black")
        self.Velocidad.configure(selectbackground="#c4c4c4")
        self.Velocidad.configure(textvariable=P3_support.spinbox)

        self.Detener = tk.Button(self.Comandos)
        self.Detener.place(relx=0.123, rely=0.492, height=25, width=77)
        self.Detener.configure(activebackground="#f9f9f9")
        self.Detener.configure(text='''Detener''')

        self.TOmar_Panorámica = tk.Button(self.Comandos)
        self.TOmar_Panorámica.place(relx=0.319, rely=0.031, height=25, width=140)

        self.TOmar_Panorámica.configure(activebackground="#f9f9f9")
        self.TOmar_Panorámica.configure(text='''Tomar Panorámica''')

        self.Panorámica = tk.Canvas(self.Comandos)
        self.Panorámica.place(relx=0.319, rely=0.123, relheight=0.834
                , relwidth=0.664)
        self.Panorámica.configure(borderwidth="2")
        self.Panorámica.configure(relief="ridge")
        self.Panorámica.configure(selectbackground="#c4c4c4")

        self.Mediciones = tk.Frame(top)
        self.Mediciones.place(relx=0.046, rely=0.505, relheight=0.456
                , relwidth=0.941)
        self.Mediciones.configure(relief='groove')
        self.Mediciones.configure(borderwidth="2")
        self.Mediciones.configure(relief="groove")

        self.Message1 = tk.Message(self.Mediciones)
        self.Message1.place(relx=0.016, rely=0.185, relheight=0.637
                , relwidth=0.268)
        self.Message1.configure(text='''Mediciones

Uĺtima actualización: 19/04/20 14:32:03

Temperatura: 41 °C

Presión: 1.01 atm

Coordenadas: (-21.7399329,-59.9498255,8.25)

Orientación: 21,324°''')
        self.Message1.configure(textvariable=P3_support.a)
        self.Message1.configure(width=329)

        self.TSeparator1 = ttk.Separator(self.Mediciones)
        self.TSeparator1.place(relx=0.304, rely=-0.006, relheight=1.003)
        self.TSeparator1.configure(orient="vertical")

        self.Label1 = tk.Label(self.Mediciones)
        self.Label1.place(relx=0.327, rely=0.031, height=15, width=235)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(text='''Visualización de datos históricos''')

        self.Temperatura = tk.Button(self.Mediciones)
        self.Temperatura.place(relx=0.327, rely=0.092, height=25, width=105)
        self.Temperatura.configure(activebackground="#f9f9f9")
        self.Temperatura.configure(text='''Temperatura''')

        self.Presión = tk.Button(self.Mediciones)
        self.Presión.place(relx=0.426, rely=0.092, height=25, width=77)
        self.Presión.configure(activebackground="#f9f9f9")
        self.Presión.configure(text='''Presión''')

        self.Canvas1 = tk.Canvas(self.Mediciones)
        self.Canvas1.place(relx=0.327, rely=0.185, relheight=0.772
                , relwidth=0.654)
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="#c4c4c4")

if __name__ == '__main__':
    vp_start_gui()
